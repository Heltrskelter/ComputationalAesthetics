var SessionImpl = require('session/session-impl');
var DataTypes = require('data/datatypes');
var Metadata = require('metadata/metadata');
var Topics = require('./topics/topics');
var TopicSelectors = require('./selectors/topic-selectors');
var ErrorReport = require('services/error-report');
var ClientControlOptions = require('./features/client-control-options');

var Emitter = require('events/emitter');
var Result = require('events/result');

var log = require('util/logger');
log.setLevel('SILENT');

var logger = log.create('Diffusion');

/**
 * The top-level Diffusion API.
 * <P>
 * Provides access to Session connections and global namespaces.
 *
 * @namespace diffusion
 *
 * @property {String} version - The version of this client library in the form major.minor.patch
 * @property {diffusion.topics} topics - Access to the topics namespace.
 * @property {diffusion.clients} clients - Access to PropertyKeys.
 * @property {diffusion.metadata} metadata - Access to the metadata namespace.
 * @property {diffusion.selectors} selectors - Access to the selectors namespace.
 * @property {diffusion.datatypes} datatypes - Access to the datatypes namespace.
 * @property {ErrorReport} errorReport - Access to the ErrorReport class.
 */
var diffusion = {
    /*
     * The version of this client library in the form major.minor.patch
     */
    version: '5.9.4',

    build: '4_dev#internal',

    /**
     * Set the level of logging used by Diffusion. This will default to silent. Log levels are strings that represent
     * different degrees of information to be logged. Available options are:
     * <ul>
     * <li>silent</li>
     * <li>error</li>
     * <li>warn</li>
     * <li>info</li>
     * <li>debug</li>
     * </ul>
     *
     * @function diffusion#log
     * @param {String} level - The log level to use.
     */
    log: function (level) {
        log.setLevel(level);
    },

    /**
     * Connect to a specified Diffusion server. This will return a {@link Result} that will complete succesfully
     * if a session can be connected, or fail if an error was encountered.
     * <P>
     * If the result is succesful, the fulfilled handler will be called with a {@link Session} instance. This
     * session will be in a connected state and may be used for subsequent API calls.
     * <P>
     * If the result fails, the rejected handler will be called with an error reason.
     *
     * @example
     * diffusion.connect('example.server.com').then(function(session) {
     *     // Connected with a session
     *     console.log('Connected!', session);
     * }, function(error) {
     *     // Connection failed
     *     console.log('Failed to connect', error);
     * });
     *
     *
     * @function diffusion#connect
     *
     * @param {Session.Options|String} [options] - The options to construct the session with.
     * @returns {Result<Session>} A {@link Result<Session>} for this operation
     */
    connect: function (options) {
        var sessionImpl = new SessionImpl(options);
        var session = sessionImpl.get();

        var emitter = new Emitter();
        var r = new Result(emitter);

        function onClose(reason) {
            logger.debug('Session closed', reason);

            session.off({
                connect: onConnect,
                close: onClose
            });

            emitter.error(reason);
        }

        function onConnect(session) {
            logger.info('Session connected', session.toString());

            session.off({
                connect: onConnect,
                close: onClose
            });

            emitter.emit('connect', session);
        }

        session.on({
            connect: onConnect,
            close: onClose
        });

        sessionImpl.connect();

        return r;
    },

    datatypes: DataTypes,

    selectors: TopicSelectors,

    metadata: Metadata,

    topics: Topics,

    errorReport: ErrorReport,

    clients: ClientControlOptions
};

module.exports = diffusion;
