var _interface = require('util/interface').interface;

/**
 * Content that is derived from {@link diffusion.metadata.RecordContent}.
 * Contains a set of named {@link RecordContent.Record}s that can be accessed directly or iterated over.
 * <P>
 * RecordContent is produced by {@link diffusion.metadata.RecordContent#parse}. It should not be constructed manually.
 *
 * @example
 * // Produce a RecordContent instance from an update value
 * session.subscribe('my-topic', function(update) {
 *    var content = metadata.parse(update);
 *
 *    // Access content
 * });
 *
 *
 * @example
 * // Retrieve a specific record
 * var record = content.get('foo');
 * record.forEach(function(field) {
 *     // Do something with field
 * });
 *
 * @example
 * // Iterate through all records and construct data objects from field values
 * content.forEach(function(record) {
 *     var data = {
 *         foo : record.get('foo'),
 *         bar : record.fields('bar')
 *     };
 *
 *     // Do something with data object
 * });
 *
 * @class RecordContent
 */
var RecordContent = _interface('RecordContent', [
    /**
     * Get a record for a given name and index. If the specified record doesn't
     * exist, this will return <code>undefined</code>
     *
     * @example
     * // Get the first named record
     * var record = content.get('record-name');
     *
     * @example
     * // Get a record by index
     * var record = content.get('record-name', 1);
     *
     * @function RecordContent#get
     *
     * @param {String} name - The record name to retrieve
     * @param {Number} [index = 0] - The record index
     * @returns RecordContent.Record The record found for the name
     */
    'get',

    /**
     * Get all records for a specific record name.
     * <P>
     * If no name is given, this will return all records that this content
     * instance contains.
     * <P>
     * If no records exist for the given name, this will return an empty array.
     *
     * @example
     * // Get all records
     * var records = content.records();
     *
     * @example
     * // Get all records with a specific name
     * var myRecords = content.records('record-name');
     *
     * @function RecordContent#records
     *
     * @param {String} [name] - The record name
     * @returns {RecordContent.Record}[{@link RecordContent.Record}] Array of records
     */
    'records',

    /**
     * Iterate through all the records in this content instance.
     * <P>
     * The iterator function will be provided with each record instance and its
     * index.
     *
     * @example
     * content.forEach(function(record, i) {
     *     // Do something with the record.
     * });
     *
     * @function RecordContent#forEach
     *
     * @param {Function} iterator - The iterator function
     */
    'forEach'
]);

/**
 * A set of values that can be accessed directly or iterated over. A record may be accessed via {@link
 * RecordContent} methods.
 * <P>
 * The structure and type of values is defined by a {@link diffusion.metadata.RecordContent.Record} definition.
 *
 * @example
 * // Get values directly from the record
 * var foo = record.get('foo');
 * var bar = record.get('bar');
 *
 * @example
 * // Iterate over all values
 * record.forEach(function(value) {
 *     console.log(value);
 * });
 *
 * @class RecordContent.Record
 */
RecordContent.Record = _interface('Record', [
    /**
     * Get the value for a given field name. An optional index may be provided if the metadata allows for multiple
     * values under this field.
     * <P>
     * If the value doesn't exist, this will return <code>undefined</code>.
     *
     * @example
     * // Get the first field for a name
     * var value = record.get('field-name');
     *
     * @example
     * // Get the a field value by index
     * var value = record.get('field-name', 2);
     *
     * @function RecordContent.Record#get
     *
     * @param {String} name - The field name
     * @param {Number} [index=0] - The field index
     * @returns {Object} The field's value
     */
    'get',

    /**
     * Get all values for a specific field name.
     * <P>
     * If no name is given, this will return all field values that this record
     * contains.
     * <P>
     * If no values exist for the given name, this will return an empty array.
     *
     * @example
     * // Get all fields
     * var fields = content.fields();
     *
     * @example
     * // Get all values for a specific field name
     * var myFields = content.fields('field-name');
     *
     * @function RecordContent.Record#fields
     *
     * @param {String} [name] - The field name
     * @returns Object[] The values
     */
    'fields',

    /**
     * Iterate through all the values in this record. The iterator function will
     * be called with each field and its index.
     *
     * @example
     * record.forEach(function(field, i) {
     *     // Do something with the field.
     * });
     *
     * @param {Function} iterator - The iterator function
     * @function RecordContent.Record#forEach
     */
    'forEach'
]);

/**
 * A builder that allows the creation of {@link RecordContent} instances with a structure defined
 * by {@link diffusion.metadata.RecordContent metadata}. Use this to generate updates for use with
 * {@link Session.topics#update}.
 * <P>
 * <br />
 * Constructed by calling {@link diffusion.metadata.RecordContent#builder}.
 *
 * @example
 * // Derive a builder from a metadata instance
 * var builder = metadata.builder();
 *
 * // Add a record with a single field value
 * builder.add('foo', {
 *      bar : "hello world"
 * });
 *
 * // Create a content instance
 * var content = builder.build();
 *
 * @class RecordContent.Builder
 */
RecordContent.Builder = _interface('RecordContentBuilder', [
    /**
     * Add a new record with a given name. Field values can be provided as an object of key/value pairs. If the metadata
     * allows multiple records, this will add a new record up until the maximum limit.
     * <P>
     * <br />
     * If the metadata this builder was created for does not support the record name or field values provided, an
     * exception will be thrown.
     * <P>
     * If the metadata for this record specifies a maximum {@link diffusion.metadata.RecordContent.Occurs} value,
     * then an error will be thrown if a record is added that would exceed this limit.
     *
     * @example
     * // Add a record and get the builder reference for it
     * var rbuilder = builder.add('foo');
     *
     * @example
     * // Add a record with provided field values
     * var rbuilder = builder.add('bar', {
     *     a : "hello",
     *     b : 123
     * });
     *
     * @example
     * // Add a record with repeating field values
     * builder.add('baz', {
     *    repeating : ["a", "b", "c"]
     * });
     *
     * @param {String} name - The name to add a record for
     * @param {Object} [fields] - Optional set of named fields
     * @returns {RecordContent.Builder.Record} A record builder
     * @throws An Error if the supplied arguments are invalid for this builder
     * @function RecordContent.Builder#add
     */
    'add',

    /**
     * Sets a specific record with a given name and index. Field values can be provided as an object of key/value
     * pairs. Field values may be overwritten on a field by field basis.
     * <P>
     * <br />
     * If a record does not exist for the specified index, it will be created with the given values.
     * <P>
     * If the metadata this builder was created for does not support the record name or field values provided, an
     * exception will be thrown.
     *
     * @example
     * // Override the existing record
     * builder.set('foo');
     *
     * @example
     * // Set a specific field for the first record.
     * builder.set('bar', {
     *     a : "world"
     * }, 0);
     *
     * @param {String} name - The name to set a record for
     * @param {Object} [fields] - Optional set of named fields
     * @param {Number} [index=0] - The record index to set values for
     * @returns {RecordContent.Builder.Record} A record builder
     * @throws An Error if the supplied arguments are unsupported by the associated metadata
     * @function RecordContent.Builder#set
     */
    'set',

    /**
     * Create a new {@link RecordContent} with the values set by this builder. Any records and fields that are required
     * but have not been set, will use their default metadata values.
     *
     * @returns {RecordContent} the content
     * @function RecordContent.Builder#build
     */
    'build',

    /**
     * Convenience function for adding records and building {@link RecordContent} in a single call.
     * <p>
     * See {@link RecordContent.Builder#add} and {@link RecordContent.Builder#build}.
     * <p>
     *
     * @example
     * builder.addAndBuild('foo', { 'bar' : 'wibble', 'baz' : 'wobble' });
     *
     * @param {String} name - The name to add a record for
     * @param {Object} [fields] - Optional set of named fields
     * @returns {RecordContent} the content
     * @throws An Error if the supplied arguments are invalid for this builder
     * @function RecordContent.Builder#addAndBuild
     */
    'addAndBuild',

    /**
     * Convenience function for setting records and building {@link RecordContent} in a single call.
     * <p>
     * See {@link RecordContent.Builder#set} and {@link RecordContent.Builder#build}.
     *
     * @param {String} name - The name to set a record for
     * @param {Object} [fields] - Optional set of named fields
     * @param {Number} [index=0] - The record index to set values for
     * @returns {RecordContent} the content
     * @throws An Error if the supplied arguments are unsupported by the associated metadata
     * @function RecordContent.Builder#setAndBuild
     */
    'setAndBuild'
]);

/**
 * A builder for a specific {@link RecordContent.Record}, created by a {@link RecordContent.Builder} instance.
 * <P>
 * <br />
 * Allows the setting of field values based on name and index.
 *
 * @class RecordContent.Builder.Record
 */
RecordContent.Builder.Record = _interface('RecordContentRecordBuilder', [
    /**
     * Add a field value for a given name. If the associated metadata allows multiple fields, this will
     * append the new field value up until the maximum limit.
     * <P>
     * If the name or value do not conform to the associated metadata, this will  throw an error.
     *
     * @example
     * // Add two separate field values with different names
     * rbuilder.add('foo', 'bar');
     * rbuilder.add('bing', 123);
     *
     * @param {String} name - The field name
     * @param {Object} value - The field value
     * @throws Error if the name or value are not allowed by the metadata
     *
     * @function RecordContent.Builder.Record#add
     */
    'add',

    /**
     * Set a field value with a given name and index. If the field does not exist, it will be created.
     * <P>
     * <br />
     * An error will be thrown if the value or index are not supported by the associated metadata.
     *
     * @example
     * // Set the second value
     * rbuilder.set('foo', 'baz', 1);
     *
     * @param {String} name - The field name
     * @param {Object} value - The field value
     * @param {Number} [index=0] - The field index
     * @returns {RecordContent.Builder.Record} This builder
     * @throws Error if the supplied arguments are unsupported by the associated metadata
     * @function RecordContent.Builder.Record#set
     */
    'set'
]);

module.exports = RecordContent;
