/**
 * Provide access to {@link diffusion.topics.TopicType TopicType} and
 * {@link diffusion.topics.UnsubscribeReason UnsubscribeReason}
 * @namespace diffusion.topics
 */

// private function
function type(id, stateful, functional) {
    return {
        id : id,
        stateful : stateful,
        functional : functional
    };
}

/**
 * Enum containing possible Topic Types.
 *
 * @example
 * // Get a topic type for adding topics
 * var topicType = diffusion.topics.TopicType.JSON;
 *
 * session.topics.add("foo", topicType);
 *
 * @readonly
 * @enum
 * @memberOf diffusion.topics
 * @alias TopicType
 */
module.exports.TopicType = {
    /**
     * Stateless Topic.
     * <P>
     * A stateless topic is one that has no data maintained at the server and performs no specific function.
     * Such a topic would normally be used simply to act as an organisational node within the topic tree but may
     * also be used for sending messages.
     */
    STATELESS : type(1, false, false),

    /**
     * Single value topic.
     * <P>
     * This is a stateful topic that maintains its state as a single String value which may optionally be validated and
     * constrained by type (e.g {@link diffusion.metadata.Integer}, {@link diffusion.metadata.Decimal}).
     * The type is defined by a {@link diffusion.metadata} instance.
     */
    SINGLE_VALUE : type(3, true, false),

    /**
     * Record topic.
     * <P>
     * This is a stateful topic that maintains its state in record format. The format of the topic content may be one
     * or more {@link diffusion.metadata.MRecordContent.Record Records} as defined by an item of
     * {@link diffusion.metadata.MRecordContent} metadata. When such a topic is updated, the metadata is used
     * to interpet the data and make comparisons between the current topic state and the update such that a delta of
     * change can be calculated for publishing to subscribed clients.
     */
    RECORD : type(4, true, false),

    /**
     * @deprecated
     */
    PROTOCOL_BUFFER : type(5, true, false),
    /**
     * Custom Topic.
     * <P>
     * A stateful topic that maintains its state via a
     * user written Java class deployed at the server.
     * <P>
     * <strong>Deprecated since 5.9. This topic type will removed in future versions of Diffusion</strong>
     */
    CUSTOM : type(6, true, false),

    /**
     * Slave Topic.
     * <P>
     * A topic that references another topic (the master topic) which has data
     * (i.e. an alias). It effectively allows a topic's data to be shared across
     * more than one topic node.
     * <P>
     * A client cannot tell that it is subscribed to a slave topic. A client
     * requesting details of a slave topic will receive the details of the
     * master topic. A client subscribing to the slave topic will receive all
     * updates to the master topic. The slave topic itself may not be updated.
     * <P>
     * Any number of slave topics may reference the same master topic.
     * <P>
     * If a topic is removed that referenced by slave topics, all such slave
     * topics are also automatically removed.
     * <P>
     * Slave topics are unable to be created by the Javascript client, but may safely be subscribed to.
     */
    SLAVE : type(7, true, false),

    /**
     * Deprecated
     */
    SERVICE : type(8, false, true),

    /**
     * Paged String Topic.
     * <P>
     * A functional topic that maintains its state as a
     * list of Strings which individual clients can page through and be
     * dynamically notified of changes.
     * <P>
     * Currently paged topics may only be used by user of the classic API.
     * <P>
     * <strong>Deprecated since 5.9. This topic type will removed in future versions of Diffusion</strong>
     */
    PAGED_STRING : type(9, false, true),

    /**
     * Paged String Topic.
     * <P>
     * A functional topic that maintains its state as a
     * list of Strings which individual clients can page through and be
     * dynamically notified of changes.
     * <P>
     * Currently paged topics may only be used by user of the classic API.
     * <P>
     * <strong>Deprecated since 5.9. This topic type will removed in future versions of Diffusion</strong>
     */
    PAGED_RECORD : type(10, false, true),

    /**
     * Deprecated
     */
    TOPIC_NOTIFY : type(11, false, true),

    /**
     * Routing Topic.
     * <P>
     * A functional topic that can point to different
     * target topics for different clients.
     * <P>
     * From the point of view of a client subscribing to such a topic this would
     * be seen as a normal stateful topic but it has no
     * state of its own and cannot be published to.
     * <P>
     * Such a topic may specify a user written Java class which will be invoked
     * to define the mapping of the topic to another data topic when a client
     * subscribes. Alternatively the mapping can be delegated to a control
     * client using the SubscriptionControl feature.
     */
    ROUTING : type(12, false, true),

    /**
     * Deprecated
     */
    CHILD_LIST : type(13, false, true),

    /**
     * Binary Topic.
     * <P>
     * This is a stateful topic that handles data in Binary format.
     * @since 5.7
     */
    BINARY : type(14, true, false),
    /**
     * JSON (JavaScript Object Notation) Topic.
     * <P>
     * This is a stateful topic that handles data in JSON representation.
     * @since 5.7
     */
    JSON : type(15, true, false)
};

function reason(id, message) {
    return { id : id, message : message };
}

/**
 * Enum containing reasons that an unsubscription occurred.
 *
 * @example
 * // Use UnsubscribeReason to validate unsubscription notifications
 * session.subscribe(">foo").on('unsubscribe', function(reason, topic) {
 *     switch (reason) {
 *         case diffusion.topics.UnsubscribeReason.REMOVED :
 *             // Do something if the topic was removed
 *         default :
 *             // Do something else if the client was explicitly unsubscribed
 *     }
 * });
 *
 * @readonly
 * @enum
 * @memberOf diffusion.topics
 * @alias UnsubscribeReason
 */
module.exports.UnsubscribeReason = {
    /**
     * The server has re-subscribed this session to the topic. Existing
     * streams are unsubscribed because the topic type and other attributes
     * may have changed.
     *
     * <p>
     * This can happen if a set of servers are configured to use session
     * replication, and the session connected to one server reconnects
     * ("fails over") to a different server.
     *
     * <p>
     * A stream that receives an unsubscription notification with this
     * reason will also receive a subscription notification with the new
     * {@link TopicSpecification} or {@link TopicDetails}.
     *
     * @since 5.9
     */
    SUBSCRIPTION_REFRESH : reason(undefined, "The server has re-subscribed this session"),

    /**
     * A fallback stream has been unsubscribed or subscribed due to the
     * addition or removal of a stream that selects the topic.
     *
     * @since 5.9
     */
    STREAM_CHANGE : reason(undefined, "A more specific stream has been registered to the same path"),

    /**
     * The unsubscription was requested by this client.
     */
    REQUESTED : reason(0, "The unsubscription was requested by this client"),
    /**
     * The server or another client unsubscribed this client.
     */
    CONTROL : reason(1, "The server or another client unsubscribed this client"),
    /**
     * The topic was removed
     */
    REMOVED : reason(2, "The topic was removed"),
    /**
     * The unsubscription occurred because the session is no longer authorized to access the topic.
     * @since 5.9
     */
    AUTHORIZATION : reason(3, "Not authorized to subscribe to this topic")
};

function UpdateFailReason(id, reason) {
    this.id = id;
    this.reason = reason;
}

/**
 * The reason that a topic could not be updated.
 *
 * @example
 * session.topics.update("foo", "bar").then(function() { ... }, function(err) {
 *     switch (err) {
 *         case diffusion.topics.UpdateFailReason.MISSING_TOPIC:
 *             ...
 *         case diffusion.topics.UpdateFailReason.EXCLUSIVE_UPDATER_CONFLICT:
 *             ...
 *     }
 * });
 *
 * @readonly
 * @enum
 * @memberof diffusion.topics
 * @alias UpdateFailReason
 */
module.exports.UpdateFailReason = {
    /**
     * The update was of a type that is not compatible with the topic it was submitted for, or
     * the topic does not support updating.
     */
    INCOMPATIBLE_UPDATE: new UpdateFailReason(1, "Update type is incompatible with topic type"),
    /**
     * The update failed, possibly because the content sent with the update was invalid/incompatible with topic type or
     * data format.
     */
    UPDATE_FAILED: new UpdateFailReason(2, "Update failed - possible content incompatibility"),
    /**
     * The updater used is not active.
     */
    INVALID_UPDATER: new UpdateFailReason(3, "Updater is invalid for updating"),
    /**
     * The topic being updated does not exist.
     */
    MISSING_TOPIC: new UpdateFailReason(4, "Topic does not exist"),
    /**
     * Invalid key or index used for addressing topic content.
     */
    INVALID_ADDRESS: new UpdateFailReason(5, "Key or index value is invalid for topic data"),
    /**
     * Violation of content duplication restrictions.
     */
    DUPLICATES: new UpdateFailReason(6, "Duplicates violation"),
    /**
     * Attempt to perform a non-exclusive update to a topic branch that already has an update source registered to it.
     */
    EXCLUSIVE_UPDATER_CONFLICT:
        new UpdateFailReason(7, "An exclusive update source is already registered for the topic branch"),
    /**
     * An attempt has been made to apply a delta to a topic that has not yet has a value specified for it.
     */
    DELTA_WITHOUT_VALUE:
        new UpdateFailReason(8, "An attempt has been made to apply a delta to a topic that does not yet have a value")
};

/**
 * The reason that a topic could not be added.
 *
 * @example
 * session.topics.add("foo").then(function() { ... }, function(err) {
 *     switch (err) {
 *          case diffusion.topics.TopicAddFailReason.EXISTS:
 *              ...
 *          case diffusion.topics.TopicAddFailReason.INVALID_PATH:
 *              ...
 *     }
 * });
 *
 * @readonly
 * @enum
 * @memberOf diffusion.topics
 * @alias TopicAddFailReason
 */
module.exports.TopicAddFailReason = {
    /** The topic already exists with the same details. */
    EXISTS: {
        id: 1,
        reason: "The topic already exists with the same details"
    },
    /** The topic already exists, with different details. */
    EXISTS_MISMATCH: {
        id: 2,
        reason: "The topic already exists, with different details"
    },
    /** The topic path is invalid. */
    INVALID_PATH: {
        id: 3,
        reason: "The topic path is invalid"
    },
    /** The topic details are invalid. */
    INVALID_DETAILS: {
        id: 4,
        reason: "The topic details are invalid"
    },
    /** A user supplied class could not be found or instantiated. */
    USER_CODE_ERROR: {
        id: 5,
        reason: "A user supplied class could not be found or instantiated"
    },
    /** A referenced topic could not be found. */
    TOPIC_NOT_FOUND: {
        id: 6,
        reason: "A referenced topic could not be found"
    },
    /** Invalid permissions to add a topic at the specified path. */
    PERMISSIONS_FAILURE: {
        id: 7,
        reason: "Invalid permissions to add a topic at the specified path"
    },
    /** The topic could not be initialised, supplied value may be of the wrong format. */
    INITIALISE_ERROR: {
        id: 8,
        reason: "The topic could not be initialised, supplied value may be of the wrong format"
    },
    /** An unexpected error occured while creating the topic. */
    UNEXPECTED_ERROR: {
        id: 9,
        reason: "An unexpected error occured while creating the topic"
    }
};