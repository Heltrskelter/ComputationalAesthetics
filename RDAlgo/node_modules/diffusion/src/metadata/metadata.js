var _interface = require('util/interface').interface;

/**
 * Metadata describes the type and structure of data that a topic allows.
 * <P>
 * Metadata can be used for {@link Session.topics#add adding} topics,
 * {@link Session.topics#update updating} topics, and
 * {@link Subscription#transform parsing updates} received from subscriptions.
 * <P>
 * You can also re-use particular metadata instances across multiple topics,
 * allowing you to define well-known formats that can be applied across your
 * application.
 * <P>
 * Metadata is accessed via the <code>diffusion</code> singleton.
 *
 * @example
 * // Creating a metadata instance
 * var meta = new diffusion.metadata.Integer();
 *
 * @example
 * // Using metadata to add topics
 * session.topics.add('my/topic', meta);
 *
 * @example
 * // Using metadata to parse updates
 * session.subscribe('my/topic').transform(meta).on('update', function(val) {
 *      // Do something with the integer value
 * });
 *
 * @namespace diffusion.metadata
 */
var Metadata = _interface('Metadata', [
    'String',

    'Integer',

    'Decimal',

    'Stateless',

    'RecordContent'
]);

/**
 * @typedef {Object} diffusion.metadata.RecordContent.Occurs
 * @property {Number} [min=1] - The minimum number allowed
 * @property {Number} [max=1] - The maximum number allowed
 */

/**
 * Stateless topics do not enforce any particular value type, and do not retain any values published on them.
 *
 * @example
 * // Create a stateless metadata instance
 * var mstateless = new diffusion.metadata.Stateless();
 *
 * @class diffusion.metadata.Stateless
 */
Metadata.Stateless = _interface('Stateless', []);

/**
 * Metadata that treats topic values as Strings. Accepts a default value, to be used by any topics added with this
 * metadata.
 *
 * @example
 * // Create a String metadata instances with a default value of "Hello world"
 * var mstring = new diffusion.metadata.String("Hello world");
 *
 * @class diffusion.metadata.String
 * @param {String} [value=''] - The default value
 */
Metadata.String = _interface('String', [
    'value'
]);

/**
 * Metadata that treats topic values as Integers. Accepts a default value, to be used by any topics added with this
 * metadata.
 *
 * @example
 * // Create an integer metadata with a default value of 123
 * var minteger = new diffusion.metadata.Integer(123);
 *
 * @class diffusion.metadata.Integer
 * @param {Number} [value=0] - The default value
 */
Metadata.Integer = _interface('Integer', [
    'value'
]);

/**
 * Metadata that treats topic values as Decimals. Accepts a default value, to be used by any topics added with this
 * metadata.
 * <P>
 * Decimal topics may specify a particular scale of accuracy to use for values. If a default value is provided, the
 * scale can be inferred from the the value unless ortherwise specified.
 *
 * @example
 * // Create a decimal metadata instance, with a default value of 3.141, limited to 3 decimal places.
 * var mdecimal = new diffusion.metadata.Decimal(Math.PI, 3);
 *
 * @class diffusion.metadata.Decimal
 * @param {Number} [value=0] - The default value
 * @param {Number} [scale=2] - The decimal scale
 */
Metadata.Decimal = _interface('Decimal', [
    'value',
    'scale'
]);

/**
 * <P>
 * Metadata that supports a user-defined tabular structure for values.
 * <P>
 * A record topic can have multiple {@link diffusion.metadata.RecordContent.Record Records},
 * each of which may have multiple {@link diffusion.metadata.RecordContent.Field Fields}.
 * Records and Fields are named, allowing direct lookup when used with topic updates.
 * <P>
 * Each {@link diffusion.metadata.RecordContent.Field Field} has a specified metadata type, which enforces the type of
 * value that can be used for sending updates.
 *
 * @class diffusion.metadata.RecordContent
 */
Metadata.RecordContent = _interface('RecordContent', [
    /**
     * Specify the minimum and maximum number of times a
     * {@link diffusion.metadata.RecordContent.Record Record} or
     * {@link diffusion.metadata.RecordContent.Field Field} may occur. This allows
     * metadata to specify required, optional, or repeating records and fields.
     * <P>
     * If no maximum value is provided, it will be set as the same as the
     * minimum value.
     * <P>
     * A value of <code>-1</code> is interpreted as 'unlimited'.
     *
     * @function diffusion.metadata.RecordContent#occurs
     *
     * @param {integer} min - The minimum number of times that a field or record can occur.
     * @param {integer} [max] - The maximum number of times that a field or record can occur.
     * @returns {diffusion.metadata.RecordContent.Occurs} The min and max occurences.
     */
    'occurs',

    /**
     * Add a new {@link diffusion.metadata.RecordContent.Record Record}. Records
     * are added in order; this allows both name and index based lookup.
     *
     * @example
     * // Add a single record
     * var metadata = new diffusion.metadata.RecordContent();
     * var record = metadata.addRecord('name');
     *
     * @example
     * // Add a record that can repeat up to 5 times
     * var metadata = new diffusion.metadata.RecordContent();
     * var record = metadata.addRecord('foo', metadata.occurs(0, 5));
     *
     * @example
     * // Add a record with specified fields
     * var metadata = new diffusion.metadata.RecordContent();
     * var record = metadata.addRecord('foo', metadata.occurs(1), {
     *     field1 : metadata.integer(),
     *     field2 : metadata.string()
     * });
     *
     * @function Metadata.RecordContent#addRecord
     *
     * @param {String} name - The name of this record
     * @param {diffusion.metadata.RecordContent.Occurs} [occurs={min:1, max:1}]
     * An optional specification of how many times this record can repeat
     * @param {Object} [fields={}] - Optional set of fields to add to this record
     * @returns The new {@link diffusion.metadata.RecordContent.Record Record}.
     */
    'addRecord',

    /**
     * Get a record that is attached to this metadata.
     * <P>
     * If a string is provided, this will lookup the record that was added with
     * that same name, if it exists. If a number is given, this will be treated
     * as the zero-indexed number of the record to return.
     *
     * @example
     * // Get the record named 'foo'
     * var record = metadata.getRecord('foo');
     *
     * @example
     * // Get the second record that was added
     * var record = metadata.getRecord(1);
     *
     * @function diffusion.metadata.RecordContent#getRecord
     *
     * @param {Number|String} key - The key to lookup the record with
     * @returns {diffusion.metadata.RecordContent.Record} The record, or <code>null</code>
     */
    'getRecord',

    /**
     * Get all records in order, as an array.
     *
     * @function diffusion.metadata.RecordContent#getRecords
     *
     * @returns {diffusion.metadata.RecordContent.Record[]} The records
     */
    'getRecords',

    /**
     * Alias for the {@link diffusion.metadata.String} constructor.
     *
     * @function diffusion.metadata.RecordContent#string
     */
    'string',

    /**
     * Alias for the {@link diffusion.metadata.Integer} constructor.
     *
     * @function diffusion.metadata.RecordContent#integer
     */
    'integer',

    /**
     * Alias for the {@link diffusion.metadata.Decimal} constructor.
     *
     * @function diffusion.metadata.RecordContent#decimal
     */
    'decimal',

    /**
     * Create a new {@link RecordContent.Builder} from this metadata.
     * <P>
     * The returned builder facilitates the construction of {@link RecordContent}
     * for updates, with the content data constrained by the structure of this
     * metadata.
     *
     * @example
     * var metadata = new diffusion.metadata.RecordContent();
     * var builder = metadata.builder();
     *
     * @function diffusion.metadata.RecordContent#builder
     *
     * @returns {RecordContent.Builder} A new builder
     */
    'builder',

    /**
     * Parse binary data into a {@link RecordContent} based on the structure of
     * this metadata.
     *
     * @example
     * // Parse an update into content
     * var content = metadata.parse(update);
     *
     * @function diffusion.metadata.RecordContent#parse
     * @param {Buffer} buffer - The data to parse
     * @throws An exception if the data cannot be parsed
     * @returns {RecordContent} A record content instance
     */
    'parse'
]);

/**
 * Defines a named record. A record may contain {@link diffusion.metadata.RecordContent.Field Fields}
 * which specify value types.
 *
 * @class diffusion.metadata.RecordContent.Record
 * @property {String} name - The name of the record used for adding records via
 * {@link RecordContent.Builder#add}.
 * @property {diffusion.metadata.RecordContent.Occurs} [occurs=1] - The number of times this
 * record can occur.
 */
Metadata.RecordContent.Record = _interface('Record', [
    /*
     * The name of this record. Used for adding records via
     * {@link RecordContent.Builder#add}.
     */
    'name',

    /*
     * The number of times this record can occur.
     */
    'occurs',

    /**
     * Add a named field to this Record with a specified type.
     * <P>
     * The type may be one of:
     * <ul>
     * <li>{@link diffusion.metadata.String}</li>
     * <li>{@link diffusion.metadata.Integer}</li>
     * <li>{@link diffusion.metadata.Decimal}</li>
     * </ul>
     *
     * Alternatively, you may provide a default value instead of the type; the appropriate metadata will be created
     * automatically with the supplied value used as the default.
     * <P>
     * If no type is provided, {@link Metadata.String} will be used.
     * <P>
     * An optional {@link diffusion.metadata.RecordContent.Occurs occurs} may be provided to specify the amount of
     * times this field may occur.
     *
     * @example
     * // Add a field with a default value
     * var fieldMeta = recordMeta.addField('field', 123);
     *
     * @example
     * // Add a field with specified type that repeats three times
     * var fieldMeta = recordMeta.addField('field', new diffusion.metadata.Integer(0), 3);
     *
     * @function diffusion.metadata.RecordContent.Record#addField
     *
     * @param {String} name - The field name
     * @param {diffusion.metadata|Object} [type=diffusion.metadata.String] - The field type or default value
     * @param {diffusion.metadata.RecordContent.Occurs|Number} [occurs=1] - Number of times this field may occur
     * @returns {diffusion.metadata.RecordContent.Field} The field
     */
    'addField',

    /**
     * Get a field that is attached to this record by name or index.
     * <P>
     * If a string is provided, this will lookup the field that was added with
     * that same name. If a number is given, this will be treated as the zero-indexed number of the field to return.
     *
     * @example
     * // Get the field named 'foo'
     * var fieldMeta = recordMeta.getField('foo');
     *
     * @example
     * // Get the first field that was added
     * var fieldMeta = recordMeta.getField(0);
     *
     * @function diffusion.metadata.RecordContent.Record#getField
     *
     * @param {Number|String} key - The key to lookup the field with
     * @returns {diffusion.metadata.RecordContent.Field} The field, or <code>null</code>
     */
    'getField',

    /**
     * Get all fields in order, as an array.
     *
     * @function diffusion.metadata.RecordContent.Record#getFields
     *
     * @returns {diffusion.metadata.RecordContent.Field[]} The fields
     */
    'getFields'
]);

/**
 * Defines a single named field. A field has a particular metadata type, that defines the value type of the content.
 *
 * @class diffusion.metadata.RecordContent.Field
 * @property {String} name - The name of this field
 * @property {diffusion.metadata.String|diffusion.metadata.Integer|diffusion.metadata.Decimal}
 * [type=diffusion.metadata.String] - The metadata type to use for this field
 * @property {diffusion.metadata.RecordContent.Occurs|Number} [occurs=1] - The number of times this field may occur
 */
Metadata.RecordContent.Field = _interface('MField', [
    /**
     * The name of this field.
     */
    'name',
    /*
     * The type of this field.
     */
    'type',
    /*
     * The number of times this field can occur.
     */
    'occurs'
]);

module.exports = Metadata;
