var SubscriptionImpl = require('features/topics/subscription');
var Emitter = require('events/emitter');

/**
 * Internal proxy for Subscriptions.
 *
 * @param registry - StreamRegistry
 * @param selector - Topic selector
 * @param callback - Optional callback for subscription
 */
module.exports = function SubscriptionProxy(registry, selector, fallback, callback) {
    var emitter = new Emitter();
    var stream = emitter.get();
    var self = this;

    var subscription = new SubscriptionImpl(registry, stream, fallback, selector);
    var pending = true;

    stream.on('close', function() {
        registry.remove(self);
    });

    this.subscription = subscription;
    this.emitter = emitter;

    this.selects = function() {
        return true;
    };

    this.onOpen = function() {
        emitter.emit('open', subscription);
    };

    this.onDelta = function(topic, details, value) {
        emitter.emit('update', value, topic);
    };

    this.onValue = function(topic, details, value) {
        emitter.emit('update', value, topic);
    };

    this.onSubscription = function(topic, details) {
        emitter.emit('subscribe', details, topic);
    };

    this.onUnsubscription = function(topic, details, reason) {
        emitter.emit('unsubscribe', reason, topic);
    };

    // If we have a provided callback, we can automatically register the stream
    if (callback) {
        subscription.on('update', callback);

        if (fallback) {
            registry.addFallback(self);
        } else {
            registry.add(selector, self);
        }
    } else {
        // Monkey-patch so that we will only register this stream if it is subsequently used.
        subscription.on = function(event, fn) {
            if (pending) {
                if (fallback) {
                    registry.addFallback(self);
                } else {
                    registry.add(selector, self);
                }

                pending = false;
            }

            return stream.on.call(subscription, event, fn);
        };
    }
};