var _implements = require('util/interface')._implements;
var Subscription = require('../../../events/subscription');

var TypedSubscriptionProxy = require('features/topics/typed-subscription-proxy');
var View = require('features/topics/view');

var Emitter = require('events/emitter');
var util = require('metadata/util');

module.exports = _implements(Subscription, function SubscriptionImpl(registry, stream, fallback, selector) {
    for (var fn in stream) {
        this[fn] = stream[fn];
    }

    this.selector = selector;
    var self = this;

    this.view = function() {
        return new View(self);
    };

    this.asType = function(datatype, callback) {
        var proxy = new TypedSubscriptionProxy(registry, selector, datatype, fallback, callback);
        return proxy.subscription;
    };

    this.transform = function(fn) {
        var e = new Emitter();

        fn = util.isMetadata(fn) ? fn.parse.bind(fn) : fn;

        self.on('open', function(selector, s) {
            e.emit('open', selector, self);
        });

        self.on('close', function() {
            e.emit('close');
        });

        self.on('update', function(update, topic) {
            e.emit('update', fn(update), topic);
        });

        self.on('subscribe', function(details) {
            e.emit('subscribe', details);
        });

        self.on('unsubscribe', function(reason, topic) {
            e.emit('unsubscribe', reason, topic);
        });

        return new SubscriptionImpl(registry, e.get(), selector);
    };
});