var _implements = require('util/interface')._implements;

var Emitter = require('events/emitter');
var View = require('../../../events/view');

function ViewImpl(subscription) {
    var emitter = Emitter.assign(this);
    var data = {};

    subscription.on('update', function(value, topic) {
        var parts = topic.split('/');
        var child = data;
        var i = 0;
        
        for (; i < parts.length - 1; i++) {
            if (child[parts[i]] === undefined) {
                child[parts[i]] = {};
            }
            
            child = child[parts[i]];
        }
        
        child[parts[i]] = value;
        
        emitter.emit('update', data);
    });

    subscription.on('unsubscribe', function(reason, topic) {
        if (reason.id === 2) {
            var parts = topic.split('/');
            var child = data;
            var i = 0;

            for (; i < parts.length - 1; i++) {
                if (child[parts[i]] === undefined) {
                    break;
                }

                child = child[parts[i]];
            }

            delete child[parts[i]];

            emitter.emit('update', data);
        }
    });
    
    subscription.on('close', emitter.close);
    
    this.get = function() {
        return data;
    };
}

module.exports = _implements(View, ViewImpl);
