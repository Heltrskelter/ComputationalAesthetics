var parseAsRecordContent = require('content/record-content/parser');
var RecordContent = require('content/structured-record-content/record-content');

function Reader(set) {
    var pos = 0;

    this.readUpTo = function(occurs, fn) {
        // Determine the maximum number of entries we can actually read
        var max = Math.min(pos + (occurs.max === -1 ? set.length : occurs.max), set.length);

        if (set.length === 0) {
            return;
        }

        // Because we're reading a flat set, ensure we have enough entries left to satisfy minimum amount
        if (occurs.min > set.length - pos) {
            throw new Error('Data exhaused while parsing');
        }

        // Iterate through all available entries that we need to read for this pass
        for (var i = pos; i < max; ++i) {
            fn(set[i]);
        }

        pos = max;
    };
}

function RecordContentMetadataParser(metadata) {
    this.parse = function(buffer) {
        var content = parseAsRecordContent(buffer);
        var reader = new Reader(content.records());
        var $records = {};

        metadata.getRecords().forEach(function(mrecord) {
            var records = [];

            reader.readUpTo(mrecord.occurs, function(record) {
                var reader = new Reader(record.fields());
                var $fields = {};

                mrecord.getFields().forEach(function(mfield) {
                    var fields = [];

                    reader.readUpTo(mfield.occurs, function(field) {
                        if (field) {
                            fields.push(mfield.type.parse(field));
                        } else {
                            fields.push(field);
                        }
                    });
                    
                    $fields[mfield.name] = fields;
                });

                records.push(new RecordContent.Record($fields));
            });

            $records[mrecord.name] = records;
        });

        return new RecordContent($records);
    };
}

module.exports = RecordContentMetadataParser;
