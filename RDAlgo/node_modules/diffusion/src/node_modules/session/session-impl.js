// Internal components
var Emitter = require('events/emitter');

var InternalSession = require('client/internal-session');
var ServiceRegistry = require('client/service-registry');
var ConnectionFactory = require('v4-stack/connection-factory');

var LoggingErrorHandler = require('conversation/logging-error-handler');
var DelegatingConversationSet = require('conversation/delegating-conversation-set');

// Service implementations
var Services = require('services/services');
var MonitoredPingService = require('client/services/monitored-ping-service');
var PingService = require('client/services/ping-service');
var NotifySubscriptionService = require('client/services/notify-subscription-service');
var NotifyUnsubscriptionService = require('client/services/notify-unsubscription-service');

// API components
var Options = require('../../options');
var Session = require('../../session');

/**
 * Creates a new {@link Session} instance and holds it until it is connected.
 */
function SessionImpl(options) {
    var emitter = new Emitter(undefined, undefined, ['connect', 'reconnect', 'disconnect']);

    var serviceRegistry = new ServiceRegistry();
    var conversationSet = new DelegatingConversationSet(LoggingErrorHandler);

    // Merge defaults
    if (typeof options === 'string') {
        options = new Options({ host : options });
    } else {
        options = new Options(options);
    }

    // Assign default service implementations
    serviceRegistry.add(Services.USER_PING, PingService);
    serviceRegistry.add(Services.SYSTEM_PING, MonitoredPingService);
    serviceRegistry.add(Services.SUBSCRIPTION_NOTIFICATION, NotifySubscriptionService);
    serviceRegistry.add(Services.UNSUBSCRIPTION_NOTIFICATION, NotifyUnsubscriptionService);

    // Create the lower-level session instance
    var internalSession =
        new InternalSession(conversationSet, serviceRegistry, ConnectionFactory, options);

    // Clone the options so that we can safely modify and expose
    // Remove credentials so bad actors cannot access password
    var session = new Session(internalSession, emitter, options.with({
        credentials : undefined
    }));

    // Bind session to internal session
    session.on('error', internalSession.close);

    internalSession.on({
        connect : function(sessionID) {
            session.sessionID = sessionID.toString();
            emitter.emit('connect', session);
        },
        reconnect : function() {
            emitter.emit('reconnect');
        },
        disconnect : function(reason) {
            emitter.emit('disconnect', reason);
        },
        error : function(err) {
            emitter.emit('error', err); 
        },
        close : function(reason) {
            emitter.emit('close', reason);
        }
    });

    // Connect the session and return it
    this.connect = function() {
        internalSession.connect();
    };

    // Return the session API
    this.get = function() {
        return session;
    };
}

module.exports = SessionImpl;
