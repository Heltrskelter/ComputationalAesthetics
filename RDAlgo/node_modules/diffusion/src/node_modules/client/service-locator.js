var CommandHeader = require('services/command-header');
var Message = require('v4-stack/message');

var log = require('util/logger').create('Service Locator');

var remove = function(arr, e) {
    var i = arr.indexOf(e);
    if (i > -1) {
        arr.splice(i, 1);
    }
};

var defaultCB = function() { };

function ServiceLocator(internalSession, serialisers, serviceAdapter) {
    var conversations = internalSession.getConversationSet();

    this.obtain = function(service) {
        var pending = [],
            requestSerialiser = serialisers.get(service.request),
            responseSerialiser = serialisers.get(service.response);

        var reference = {
            send : function(req, callback) {
                callback = callback || defaultCB;

                var handler = {
                    onOpen : function(cid) {
                        var header = new CommandHeader(service.id, cid);

                        serviceAdapter.sendRequest(header, req, requestSerialiser);
                        pending.push(cid);
                    },
                    onResponse : function(cid, input) {
                        try {
                            var response = responseSerialiser.read(input);

                            callback(null, response);
                            remove(pending, cid);

                            return true;
                        }
                        catch (e) {
                            e.message = internalSession.getSessionId() +
                            ' failed to process response for service \'' +
                            service.name +
                            '\' cid=<' + cid +
                            '> : ' + e.message;
                            throw e;
                        }
                    },
                    onDiscard : function(cid, err) {
                        remove(pending, cid);
                        callback(err);
                    }
                };
                
                var cid = conversations.new(handler, callback);
                
                return function() {
                    conversations.discard(cid, "cancelled");
                };
            },
            close : function() {
                pending.forEach(conversations.discard);
                pending = [];
            }
        };

        return reference;
    };
}

module.exports = ServiceLocator;
