var CommandHeader = require('services/command-header');
var CommandError = require('services/command-error');
var Message = require('v4-stack/message');

var type = CommandError.ErrorType;

var log = require('util/logger').create('Service Adapter');

/**
 * Adaptor to bridge v4-stack components and command services.
 *
 * @param {InternalSession} internal session - The internal session this adapter is bound to
 * @param {Serialisers} serialisers - The serialiser registry 
 * @param {Connection} connection - The session's connection
 * 
 * @class 
 */
function ServiceAdapter(internalSession, serialisers, sender) {
    var headerSerialiser = serialisers.get(CommandHeader);
    var errorSerialiser = serialisers.get(CommandError);

    var conversations = internalSession.getConversationSet();
    var listeners = {};

    function sendRequest(header, command, serialiser) {
        var msg = Message.create({
            type : Message.types.SERVICE_REQUEST
        });

        headerSerialiser.write(msg, header);
        serialiser.write(msg, command);

        log.trace('Sending command request: ' + header, command);

        sender(msg);
    }

    function sendResponse(header, command, serialiser) {
        var msg = Message.create({
            type : Message.types.SERVICE_RESPONSE
        });

        headerSerialiser.write(msg, header);
        serialiser.write(msg, command);

        log.trace('Sending command response: ' + header, command);

        sender(msg);
    }

    function sendError(header, command, serialiser) {
        var msg = Message.create({
            type : Message.types.SERVICE_ERROR
        });

        headerSerialiser.write(msg, header);
        serialiser.write(msg, command);

        log.trace('Sending error: ' + header, command);

        sender(msg);
    }

    function handleRequest(header, input) {
        var listener = listeners[header.service];

        if (listener) {
            log.trace('Received command request for service: ' + header);

            listener(header, input);
        } else {
            log.error('Received command request for unknown service: ' + header);

            var error = new CommandError(type.COMMUNICATION_FAILURE, "Unknown client service: " + header.service); 
            sendError(header.createErrorHeader(), error, errorSerialiser);
        }
    }

    function handleResponse(header, input) {
        log.trace('Received command response: ' + header);
        conversations.respond(header.cid, input);
    }

    function handleError(header, input) {
        var error = errorSerialiser.read(input);

        log.warn("Command Error received", error.message);

        conversations.discard(header.cid, new Error(error.message));
    }

    /**
     * Send a request command message to the server for a given service.
     *
     * @param {CommandHeader} header - The header encapsulating the message's context.
     * @param {Object} command - The command to send.   
     * @param {Function} serialiser - The serialiser for the command object.
     */
    this.sendRequest = sendRequest;
    /**
     * Send a response command message to the server for a given service.
     *
     * @param {CommandHeader} header - The header encapsulating the message's context.
     * @param {Object} command - The command to send.   
     * @param {Function} serialiser - The serialiser for the command object.
     */
    this.sendResponse = sendResponse;
        /**
     * Send an error command message to the server for a given service.
     *
     * @param {CommandHeader} header - The header encapsulating the message's context.
     * @param {Object} command - The command to send.   
     * @param {Function} serialiser - The serialiser for the command object.
     */
    this.sendError = sendError;

    /**
     * Add a service to the adapter, in order to receive requests from the server.
     *
     * @param {ServiceDefinition} definition - The service definition
     * @param {Service} service - The service implementation
     */
    this.addService = function addService(definition, service) {
        if (listeners[definition.id] === undefined) {
            var requestSerialiser = serialisers.get(definition.request);
            var responseSerialiser = serialisers.get(definition.response);

            listeners[definition.id] = function(header, input) {
                var request = requestSerialiser.read(input);

                var callback = {
                    /**
                     * Respond to the inbound request.
                     *
                     * @param {Object} response - The response to send
                     */
                    respond : function(response) {
                        var rHeader = header.createResponseHeader();
                        sendResponse(rHeader, response, responseSerialiser);
                    },
                    /**
                     * Return an error to the server.
                     *
                     * @param {String} error - The error reason to send.
                     */
                    fail : function(error) {
                        var eHeader = header.createErrorHeader();
                        sendError(eHeader, error, errorSerialiser);
                    }
                };

                try {
                    service.onRequest(internalSession, request, callback);
                } catch (e) {
                    throw new Error("Unable to handle request for " + definition.id, e);
                }
            };
        } else {
            throw new Error("Service already exists for " + definition);
        }
    };
    
    /**
     * Callback function to handle inbound command messages to be routed to appropriate
     * handlers.
     *
     * @param {BufferInputStream} data - The input stream to read from.
     * @param {Mode} mode - the service message mode.
     * @throws Error if parsed CommandHeader is invalid
     */
    this.onMessage = function onMessage(modes, data) {
        var header = headerSerialiser.read(data);
        switch (modes) {
            case Message.types.SERVICE_REQUEST:
                handleRequest(header, data);
                break;
            case Message.types.SERVICE_RESPONSE:
                handleResponse(header, data);
                break;
            case Message.types.SERVICE_ERROR:
                handleError(header, data);
                break;
            default:
                throw new Error("Unknown Command Service message " + modes);
        }
    };
}

module.exports = ServiceAdapter;
