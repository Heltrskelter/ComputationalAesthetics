var _implements = require('util/interface')._implements;
var JSONDataType = require('../../../data/json/json-datatype');

var BinaryDeltaSupportImpl = require('data/binary/binary-delta-support-impl');
var BinaryDeltaImpl = require('data/binary/binary-delta-impl');
var JSONImpl = require('data/json/json-impl');

var Encoder = require('cbor/encoder');

module.exports = _implements(JSONDataType, function JSONDataTypeImpl() {
    var encoder = new Encoder();
    var self = this;

    function internalValue(val) {
        if (JSONImpl.isPrototypeOf(val)) {
            return val;
        } else if (Buffer.isBuffer(val)) {
            return self.readValue(val);
        } else {
            return self.readValue(encoder.encode(val).flush());
        }
    }

    var binaryDeltaSupport = new BinaryDeltaSupportImpl(this, internalValue);

    this.name = function() {
        return "json";
    };

    this.from = function(val) {
        return internalValue(val);
    };

    this.fromJsonString = function(val) {
        return internalValue(JSON.parse(val));
    };

    this.readValue = function(buffer, offset, length) {
        return new JSONImpl(self, buffer, offset, length);
    };

    this.writeValue = function(json) {
        json = internalValue(json);
        return json.$buffer.slice(json.$offset, json.$offset + json.$length);
    };

    this.deltaType = function(context) {
        if (!context) {
            return binaryDeltaSupport;
        } else if (typeof context === "string") {
            switch (context.toLowerCase()) {
                case "binary" :
                    return binaryDeltaSupport;
            }
        } else if (BinaryDeltaImpl.isPrototypeOf(context)) {
            return binaryDeltaSupport;
        }

        throw new Error("Unknown delta type: " + context);
    };
});