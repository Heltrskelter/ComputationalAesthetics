var _implements = require('util/interface')._implements;
var BinaryDataType = require('../../../data/binary/binary-datatype');

var BinaryDeltaSupportImpl = require('data/binary/binary-delta-support-impl');
var BinaryDeltaImpl = require('data/binary/binary-delta-impl');
var BinaryImpl = require('data/binary/binary-impl');

module.exports = _implements(BinaryDataType, function BinaryDataTypeImpl() {
    var self = this;

    function internalValue(val) {
        if (BinaryImpl.isPrototypeOf(val)) {
            return val;
        } else if (Buffer.isBuffer(val)) {
            return self.readValue(val);
        } else {
            throw new Error("Unable to read Binary value from: " + val);
        }
    }

    var binaryDeltaSupport = new BinaryDeltaSupportImpl(this, internalValue);

    this.name = function() {
        return "binary";
    };

    this.from = function(val) {
        return internalValue(val);
    };

    this.readValue = function(buffer, offset, length) {
        return new BinaryImpl(self, buffer, offset, length);
    };

    this.writeValue = function(binary) {
        binary = internalValue(binary);
        return binary.$buffer.slice(binary.$offset, binary.$offset + binary.$length);
    };

    this.deltaType = function(context) {
        if (!context) {
            return binaryDeltaSupport;
        } else if (typeof context === "string") {
            switch (context.toLowerCase()) {
                case "binary" :
                    return binaryDeltaSupport;
            }
        } else if (BinaryDeltaImpl.isPrototypeOf(context)) {
            return binaryDeltaSupport;
        }

        throw new Error("Unknown delta type: " + context);
    };
});