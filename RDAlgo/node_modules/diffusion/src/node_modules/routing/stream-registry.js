var HashMap = require('hashmap');
var Arrays = require('util/array');

/**
 * Internal registry for Subscription streams.
 */
module.exports = function StreamRegistry(topicCache) {
    var streams = new HashMap();
    var fallbacks = [];
    var self = this;

    this.add = function(selector, stream) {
        var existing = streams.get(selector);

        if (existing) {
            existing.push(stream);
        } else {
            streams.set(selector, [stream]);
        }

        topicCache.newStream(selector, stream, self);

        stream.onOpen();
    };

    this.addFallback = function(stream) {
        fallbacks.push(stream);
    };

    this.getFallbacks = function(details) {
        return fallbacks.filter(function(fallback) {
            return fallback.selects(details);
        });
    };

    this.remove = function(stream) {
        Arrays.remove(fallbacks, stream);

        streams.forEach(function(existing, selector) {
            if (Arrays.remove(existing, stream)) {
                topicCache.removeStream(stream, self);
            }

            if (existing.length === 0) {
                streams.remove(selector);
            }
        });
    };

    this.streamsFor = function(topic, details) {
        var combined = [];

        if (streams.count() > 0) {
            streams.forEach(function(existing, selector) {
                if (selector.selects(topic)) {
                    combined = combined.concat(existing.filter(function(stream) {
                        return stream.selects(details);
                    }));
                }
            });
        }

        return combined;
    };
};