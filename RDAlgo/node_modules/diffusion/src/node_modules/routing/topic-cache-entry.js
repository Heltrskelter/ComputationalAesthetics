var UnsubscribeReason = require('../../topics/topics').UnsubscribeReason;
var Arrays = require('util/array');

module.exports = function TopicCacheEntryImpl(info, streams) {
    function proxies(details, registry) {
        var p = streams;

        if (p.length === 0) {
            p = registry.getFallbacks(details);
        }

        return p;
    }

    var self = this;

    this.getTopicPath = function() {
        return info.path;
    };

    this.getTopicDetails = function() {
        return info.details;
    };

    this.notifyInitialSubscription = function(registry) {
        proxies(info.details, registry).forEach(function(proxy) {
            proxy.onSubscription(info.path, info.details);
        });
    };

    this.notifySubscription = function(proxy) {
        proxy.onSubscription(info.path, info.details);

        self.notifyValueToNewStream(info.path, info.details, proxy);
    };

    this.notifyUnsubscription = function(reason, registry) {
        proxies(info.details, registry).forEach(function(proxy) {
            proxy.onUnsubscription(info.path, info.details, reason);
        });
    };

    this.notifyValue = function(content, oldValue, newValue, registry) {
        proxies(info.details, registry).forEach(function(proxy) {
            proxy.onValue(info.path, info.details, content, oldValue, newValue);
        });
    };

    this.notifyDelta = function(content, delta, oldValue, newValue, registry) {
        proxies(info.details, registry).forEach(function(proxy) {
            proxy.onDelta(info.path, info.details, content, delta, oldValue, newValue);
        });
    };

    this.addStream = function(stream, registry) {
        if (streams.length === 0) {
            registry.getFallbacks(info.details).forEach(function(fallback) {
                fallback.onUnsubscription(info.path, info.details, UnsubscribeReason.STREAM_CHANGE);
            });
        }

        if (streams.indexOf(stream) < 0) {
            streams.push(stream);

            self.notifySubscription(stream);
        }
    };

    this.removeStream = function(stream, registry) {
        Arrays.remove(streams, stream);

        if (streams.length === 0) {
            registry.getFallbacks(info.details).forEach(function(fallback) {
                self.notifySubscription(fallback);
            });
        }
    };

    this.removeAllStreams = function() {
        streams.length = 0;
    };
};