import {Result} from '../events/result.d';

export interface Security {
  authenticationScriptBuilder: () => SystemAuthenticationScriptBuilder;
  changePrincipal: (principal: string, credentials: string) => Result<void, any>;
  getPrincipal: () => string;
  getSecurityConfiguration: () => Result<SecurityConfiguration, any>;
  getSystemAuthenticationConfiguration: () => Result<SystemAuthenticationConfiguration, any>;
  securityScriptBuilder: () => SecurityScriptBuilder;
  updateAuthenticationStore: (script: string) => Result<void, any>;
  updateSecurityStore: (script: string) => Result<void, any>;
}

export interface SystemPrincipal {
  name: string;
  roles: string[];
}

export interface Role {
  name: string;
  global: string[];
  default: string[];
  topic: Object;
  inherits: string[];
}

export interface SystemAuthenticationScriptBuilder {
  abstainAnonymousConnections: () => SystemAuthenticationScriptBuilder;
  addPrincipal: (principal: string, password: string, roles?: string[]) => SystemAuthenticationScriptBuilder;
  allowAnonymousConnections: (roles?: string[]) => SystemAuthenticationScriptBuilder;
  assignRoles: (principal: string, roles: string[]) => SystemAuthenticationScriptBuilder;
  build: () => string;
  denyAnonymousConnections: () => SystemAuthenticationScriptBuilder;
  verifyPassword: (principal: string, password: string) => SystemAuthenticationScriptBuilder;
}

export interface SecurityScriptBuilder {
  removeTopicPermissions: (role: string, path: string) => SecurityScriptBuilder;
  setDefaultTopicPermissions: (role: string, permissions?: string[]) => SecurityScriptBuilder;
  setGlobalPermissions: (role: string, permissions: string[]) => SecurityScriptBuilder;
  setRoleIncludes: (role: string, roles?: string[]) => SecurityScriptBuilder;
  setRolesForAnonymousSessions: (roles?: string[]) => SecurityScriptBuilder;
  setRolesForNamedSessions: (roles?: string[]) => SecurityScriptBuilder;
  setTopicPermissions: (role: string, path: string, permissions: string[]) => SecurityScriptBuilder;
  build: () => string;
}

export interface SecurityConfiguration {
  named: string[];
  anonymous: string[];
  roles: Role[];
}

export interface SystemAuthenticationConfiguration {
  principals: SystemPrincipal[];
  anonymous: {
    action: string,
    roles: string[]
  }
}
