import {Result, SessionPropertiesResult} from '../events/result.d';
import {Session} from './../session.d';

export interface ClientControl {
  subscribe: (session: string, selector: string) => Result<number, any>;
  unsubscribe: (session: string, selector: string) => Result<number, any>;
  getSessionProperties: (sessionID: string, requiredProperties: string[]) => SessionPropertiesResult<any, any>;
  setSessionPropertiesListener: (requiredProperties: string[], listener: SessionPropertiesListener) => Result<void, any>;
  SessionEventType: {
    UPDATED: number;
    RECONNECTED: number;
    FAILED_OVER: number;
    DISCONNECTED: number;
  };
}

export interface SessionPropertiesListener {
  onActive: (deregister: any) => void;
  onClose: () => void;
  onSessionOpen: (session: Object, properties: any) => void;
  onSessionEvent: (session: Object, SessionEventType: number, properties: any, previous: any) => void;
  onSessionClose: (session: Object, properties: any, reason: any) => void;
}
