import {Session} from './session.d';
import {ErrorReason} from './error.d';
import {SessionOptions} from './options.d';
import {Result} from './events/result.d';
import {DataTypes} from './data/datatypes.d'
import {Metadata} from './metadata/metadata.d';
import {TopicSelectors} from './selectors/topic-selectors.d';
import {ClientControl} from './features/client-control.d';
import {ErrorReport} from './error-report.d';
import {TopicType} from './topic-type.d';

type LogVerbosityLevel = "silent" | "error" | "warn" | "info" | "debug";

interface DiffusionStatic {
  version: string;
  connect(options: SessionOptions): Result<Session, ErrorReason>;
  log(level: LogVerbosityLevel): void;
  datatypes: DataTypes;
  selectors: TopicSelectors;
  metadata: Metadata;
  topics: {
    TopicType: {
      JSON: TopicType;
      BINARY: TopicType;
      RECORD: TopicType;
      SINGLE_VALUE: TopicType;
    };
    UnsubscribeReason: {
      REQUESTED: any;
      CONTROL: any;
      REMOVED: any;
      AUTHORIZATION: any;
    };
  };
  errorReport: ErrorReport;
  clients: {
    PropertyKeys: {
      ALL_FIXED_PROPERTIES: any;
      ALL_USER_PROPERTIES: any;
      ALL_PROPERTIES: any;
    };
  };
}

declare var diffusion: DiffusionStatic;

export = diffusion;
