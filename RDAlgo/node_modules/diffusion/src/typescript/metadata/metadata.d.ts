export interface Metadata {
  String: IString;
  Integer: Integer;
  Decimal: Decimal;
  Stateless: Stateless;
  RecordContent: RecordContent;
}

export interface IString {
  new(str?: string): IString;
  value: string;
}

export interface Integer {
  new(num?: number): Integer;
  value: number;
}

export interface Decimal {
  new(num?: number, scale?: number): Decimal;
  value: number;
  scale: number;
}

export interface Stateless {
  new(): Stateless;
}

export interface RecordContent {
  new(): RecordContent;
  occurs: (min: number, max?: number) => Occurs;
  addRecord: (name: string, occurs?: any, fields?: any) => Record;
  getRecord: (key: number) => Record;
  getRecords: () => Record[];
  string: (str?: string) => String;
  integer: (num?: number) => Integer;
  decimal: (num?: number, scale?: number) => Decimal;
  builder: () => RecordContentBuilder;
  parse: (buffer: any) => RecordContent;
}

export interface RecordContentBuilder {
  add: (name: string, fields?: any) => Record;
  set: (name: string, fields?: any, index?: number) => Record;
  build: () => RecordContent;
  addAndBuild: (name: string, fields?: any) => RecordContent;
  setAndBuild: (name: string, fields?: any, index?: number) => RecordContent;
}

export interface Record {
  name: string;
  occurs: Occurs;
  addField: (name: string, type: any, occurs?: any) => Field;
  getField: (key: number) => Field;
  getFields: () => Field[];
}

export interface Field {
  name: string;
  type: String|Integer|Decimal;
  occurs: Occurs;
}

export interface Occurs {
  min: number;
  max: number;
}
