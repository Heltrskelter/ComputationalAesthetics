var _interface = require('util/interface').interface;
/**
 * Messages Feature.
 * <P>
 * <br />
 * Allow sessions to send and receive messages from the server and other sessions.
 *
 * @example
 * // Get a reference to messaging feature
 * var messages = session.messages;
 *
 * @namespace Session.messages
 */
var Messages = _interface('Messaging', [
    /**
     * Send an arbitrary message to either the server or another session, on a particular path.
     * <P>
     * The path does not need to correspond to an existing topic; however the use of <code>/</code> as a hierarchical
     * delimiter allows for other sessions to listen to messages from specific paths.
     * <P>
     * The message content may be of any type that can be used for topic {@link Session.topics#update updates}. It is
     * up to any receiving session to de-serialise it as appropriate.
     * <P>
     * An optional argument may be provided to target a specific session or a collection of sessions that satisfy a
     * given filter string. Messages sent will be received if that session has established a {@link
     * Session.messages.MessageStream MessageStream} for the same message path. The ability to send messages to specific
     * sessions or via a filter is determined by permissions assigned to the sender.
     * <P>
     * If no session id or filter is given, the message will be sent to the server and dispatched to a control client
     * that has registered a {@link Session.messages.MessageHandler MessageHandler} for the same, or higher, path.
     * There is no guarantee that a MessageHandler will have been established for the path that the message is sent on.
     * <P>
     * If no recipient is specified, a successful result will resolve with a single object containing the
     * <code>path</code> that the message was sent to.
     * <P>
     * If a Session ID was used as the recipient, then the result will resolve with an object containing both
     * <code>path</code> and <code>recipient</code> fields. The result will only resolve when the message has
     * been successfully received by the intended recipient.
     * <P>
     * If a Session Filter was used to send the message, then the result will contain <code>path</code>,
     * <code>recipient</code>, <code>sent</code> and <code>errors</code> fields. The <code>sent</code> field specifies
     * the number of sessions that the filter resolved and successfully sent the message to. The <code>errors</code>
     * field contains an array of errors for any session that could not receive the message.
     *
     * @example
     * // Send a message to be received by the server and passed to a MessageHandler
     * session.messages.send('foo', 123);
     *
     * @example
     * // Send a message to a specific session
     * session.messages.send('bar', 'hello', sessionID);
     *
     * @example
     * // Send a message with a filter
     * session.messages.send('baz', 'world', '$Principal is "john"');
     *
     * @param {String} path - The message path
     * @param {Object} message - The message value
     * @param {Session.messages.SendOptions} [options] - The optional message send options
     * @param {(String|Object)} [target] - The target recipient's Session ID (as a string or
     * Session ID object) or a session property filter string.
     * @returns {Result<Session.messages.MessageSendResult>} The
     * {@link Result<Session.messages.MessageSendResult>} of the send operation
     * @function Session.messages#send
     */
    'send',

    /**
     * Listen to a stream of messages sent to this Session for a particular path. Messages will be received as
     * {@link Session.messages.Message message} instances.
     * <P>
     * The message content is dependant on the sender. Correct parsing of the message content from a <code>Buffer</code>
     * is up to the consuming session.
     * <P>
     * Received messages do not indicate which session sent them; if sender information is required then this should be
     * included within the message content.
     *
     * @example
     * // Create with a default listener function
     * session.messages.listen('foo', function(message) {
     *     // Do something with the message
     * });
     *
     * @example
     * // Create a message stream and consume from it
     * var stream = session.messages.listen('foo');
     *
     * stream.on('message', function(message) {
     *      // Do something with the message
     * });
     *
     * @param {String} path - The message path
     * @param {Function} [listener] - The default listener
     * @returns {Session.messages.MessageStream} A stream providing messages received on the specific path
     * @function Session.messages#listen
     */
    'listen',

    /**
     * Register a {@link Session.messages.MessageHandler MessageHandler} to receive  messages that were sent from other
     * sessions for a particular path but with no specified recipient. The handler must implement the 
     * {@link Session.messages.MessageHandler MessageHandler} _interface.
     * <P>
     * <br />
     * The provided handler will be passed messages received on the same path used for registration, or any lower 
     * branches. A session may only register a single handler for a given path at a time.
     * <P>
     * The message content is dependant on the sender. Correct parsing of the message content from a <code>Buffer</code>
     * is up to the consuming handler.
     * <P>
     * Unlike {@link Session.messages#listen}, received messages provide the sender's SessionId. 
     *
     * @example
     * // Create a message handler
     * var handler = {
     *     onMessage : function(message) {
     *          console.log(message); // Log the received message
     *     },
     *     onActive : function(unregister) {
     *      
     *     },
     *     onClose : function() {
     *      
     *     }
     * };
     * 
     * // Register the handler
     * session.messages.addHandler('foo/bar', handler).then(function() {
     *     // Registration happened succesfully
     * }, function(error) {
     *     // Registration failed
     * });
     *
     *
     * @param {String} path - The message path to handle
     * @param {Session.messages.MessageHandler} handler - The message handler
     * @param {Array} [keys] - Message keys to register for this session
     * @returns {Result<undefined>} The registration {@link Result<undefined>}
     * @function Session.messages#addHandler
     */
    'addHandler'
]);

/**
 * A stream of messages sent to this session for a particular path.
 *
 * @fires Stream#error
 * @fires Stream#close
 * @fires Session.messages.MessageStream#message
 * 
 * @class Session.messages.MessageStream
 * @augments Stream
 */
Messages.MessageStream = _interface('MessageStream',[
    /**
     * Emitted when a new message is received.
     *
     * @event Session.messages.MessageStream#message
     * @property {Session.messages.Message} message - the message that has been delivered.
     */
]);

/**
 * The handler interface for receiving messages sent from sessions to the server. This interface must be implemented by
 * the user, to be registered via {@link Session.messages#addHandler}.
 * <P>
 * <br/>
 * A message handler has a lifecycle that reflects the registration state on the server. This is expressed through the 
 * callback methods. Once {@link Session.messages.MessageHandler#onClose onClose} has been closed, no further 
 * interactions will occur. 
 * <P>
 * {@link Session.messages.SessionMessage Messages} received by a handler contain the identity of the original sender.
 *
 * @class Session.messages.MessageHandler
 */
Messages.MessageHandler = _interface('MessageHandler', [
    /**
     * Handle a message that was sent by another Session to the server, on a path that is a descendant of the path
     * which this handler is registered for.
     *
     * @param {Session.messages.SessionMessage} message - The received message
     * @function Session.messages.MessageHandler#onMessage
     */
    'onMessage',

    /**
     * Called when the handler has been registered at the server and is now active.
     *
     * @param {Function} unregister - A function to call that will unregister and close this handler
     * @function Session.messages.MessageHandler#onActive
     */
    'onActive',

    /**
     * Called when the handler is unregistered, or the session is closed.
     *
     * @function Session.messages.MessageHandler#onClose
     */
    'onClose'
]);

/**
 * The priority of the message. Higher priorities are delivered faster.
 *
 * @readonly
 * @enum
 * @memberOf Session.messages
 * @alias Priority
 */
Messages.Priority = {
    /** Indicates that messages should be delivered with normal priority. */
    NORMAL : 0,
    /** Indicates that messages should be delivered with high priority. */
    HIGH : 1,
    /** Indicates that messages should be delivered with low priority. */
    LOW : 2
};
/**
 * @example
 * // Read message content as a JSON DataType value
 * var jsonObj = diffusion.datatypes.json().readValue(message.content).get();
 *
 * @typedef {Object} Session.messages.Message
 * @property {String} path - The path that this message was sent on
 * @property {Buffer} content - The message's value as a binary buffer
 */
Messages.Message = {};

/**
 * @typedef {Object} Session.messages.SessionMessage
 * @property {String} path - The path that this message was sent on
 * @property {Buffer} content - The message's value as a binary buffer
 * @property {String} session - The session that sent this message
 */
Messages.SessionMessage = {};

/**
 * @typedef {Object} Session.messages.SendOptions
 * @property {Session.messages.Priority} [priority=Session.messages.Priority.NORMAL] - The message priority
 * @property {String[]} [headers=[]] - The message headers as an array of strings
 */

 /**
 * @typedef {Object} Session.messages.MessageSendResult
 * @property {String} path - topic path
 * @property {String} recipient - session filter or SessionID of the recipient
 * @property {Number} [sent] - the number of sessions the message has been sent to using a filter string
 * @property {Array<ErrorReport>} [errors] - errors from sending to sessions using a filter string
 */

module.exports = Messages;
