var _interface = require('util/interface').interface;
var Stream = require('./stream');

/**
 * Provides a stream of topic events, specific to the topic selector that this TypedSubscription was created for, with
 * topic values provided as instances of the associated {@link DataType}.
 * <P>
 * TypedSubscription inherits all functions defined on {@link Stream}.
 * <P>
 *
 * @example
 * // Create a typed subscription
 * session.subscribe('foo').asType(datatype).on('open', function(subscription) {
 *     // Get subscription instance
 * });
 *
 * @example
 * // Subscribe to a single topic and receive values
 * session.subscribe('foo').asType(datatype).on('value', function(topic, specification, newValue, oldValue) {
 *      // Receive updates for the topic 'foo'
 * });
 *
 * @example
 * // Attach multiple listeners for events
 * session.subscribe('foo').asType(datatype).on({
 *     subscribe : function(topic, specification) {
 *         // Subscribed to a particular topic
 *     },
 *     unsubscribe : function(topic, specification, reason) {
 *         // Unsubscribed from a particular topic
 *     },
 *     value : function(topic, specification, newValue, oldValue) {
 *         // Value from a topic
 *     }
 * });
 *
 *
 * @class TypedSubscription
 *
 * @fires TypedSubscription#open
 * @fires TypedSubscription#close
 * @fires TypedSubscription#value
 * @fires TypedSubscription#subscribe
 * @fires TypedSubscription#unsubscribe
 *
 * @augments Stream
 *
 * @property {String} selector The selector this subscription was created for
 */
module.exports = _interface('TypedSubscription', Stream, [
    /**
     * A static reference to the selector this Subscription was created for.
     *
     * @property {String} TypedSubscription.selector
     */
    'selector',

    /**
     * Close the subscription. No further events will be emitted.
     *
     * @function TypedSubscription#close
     */
    'close'
    /**
     * Emitted when the subscription is initially opened, passing a reference to the subscription itself. This will
     * only be fired once.
     * @event TypedSubscription#open
     */

    /**
     * Emitted when a topic that is selected by this TypedSubscription's topic selector is subscribed
     * to by this session.
     * Once subscribed, <code>value</code> update events may be received for this topic<. The specification is a
     * {@link TopicSpecification} instance that contains details about the topic.
     *
     * @event TypedSubscription#subscribe
     * @property {String} topic - the topic to which the subscription applies
     * @property {TopicSpecification} specification - instance that contains details about the topic
     */

    /**
     * Emitted when a topic that was previously subscribed, has been unsubscribed. No further update events will be
     * received from this topic until subscribed again. Unsubscriptions may occur due to the topic being removed, or
     * through calling {@link Session#unsubscribe} - an object containing the reason is provided.
     *
     * @event TypedSubscription#unsubscribe
     * @property {String} topic - the topic to which the unsubscription applies
     * @property {TopicSpecification} specification - instance that contains details about the topic
     * @property {String} reason - the reason for the unsubscription
     */

    /**
     * Emitted when an update has been received for a topic's value. Values will be provided as instances appropriate
     * for the associated {@link DataType} this subscription was created for. Both the previous value and
     * the new value are provided.
     *
     * @event TypedSubscription#value
     * @property {String} topic - the topic to which the update applies
     * @property {TopicSpecification} specification - instance that contains details about the topic
     * @property {object} newValue - the new value of the topic
     * @property {object} oldValue - the old value of the topic
     */

    /**
     * Emitted when the subscription has been closed using {@link TypedSubscription#close}.
     *
     * @event TypedSubscription#close
     */
]);
