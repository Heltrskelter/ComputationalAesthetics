var _interface = require('util/interface').interface;
var Stream = require('./stream');

/**
 * Provides a stream of topic events, specific to the topic selector that this Subscription was created for.
 * Subscription inherits all functions defined on {@link Stream}.
 * <P>
 * <br />
 *
 * @example
 * // Get a reference to the subscription
 * session.subscribe('foo').on('open', function(subscription) {
 *     // Get selector & subscription instance
 * });
 *
 * @example
 * // Subscribe to a single topic
 * var subscription = session.subscribe('foo');
 *
 * subscription.on('update', function(value) {
 *      // Receive updates for the topic 'foo'
 * });
 *
 * @example
 * var subscription = session.subscribe('?foo/.*');
 *
 * subscription.on('update', function(value, topic) {
 *      // Receive updates for any topic directly below 'foo'
 *      // The topic the update is for is provided as the second argument
 * });
 *
 * @example
 * var subscription = session.subscribe('foo');
 *
 * subscription.on('subscribe', function(details, topic) {
 *      // Receive notifications when we are subscribed to a topic
 * });
 *
 * @example
 * var subscription = session.subscribe('foo');
 *
 * subscription.on('unsubscribe', function(reason, topic) {
 *      // Receive notifications when we are unsubscribed from a topic
 * });
 *
 * @class Subscription
 *
 * @fires Subscription#open
 * @fires Subscription#close
 * @fires Subscription#update
 * @fires Subscription#subscribe
 * @fires Subscription#unsubscribe
 *
 * @augments Stream
 *
 * @property {String} selector The selector this subscription was created for
 */
module.exports = _interface('Subscription', Stream, [
    /**
     * A static reference to the selector this Subscription was created for.
     *
     * @property {String} Subscription.selector
     */
    'selector',

    /**
     * Produce a {@link TypedSubscription} from this subscription stream, in order to receive values as a particular
     * {@link DataType}. The {@link TypedSubscription} will only receive values from topics that are of matching type
     * for the provided data type.
     * <P>
     * The lifecycle of the produced {@link TypedSubscription} is independent of this subscription. If this subscription
     * was created using {@link Session#stream} without a selector (i.e as a fallback stream), the
     * {@link TypedSubscription} will also be registered as a fallback stream.
     *
     * @param {DataType} datatype - The data type to produce a stream for.
     * @returns {TypedSubscription} A new Typed Subscription stream for the provided data type
     *
     * @example
     * // Produce a typed subscription for receiving JSON values.
     * var datatype = diffusion.datatypes.json();
     *
     * session.subscribe('foo').asType(datatype).on('value', function(topic, value) {
     *     //...
     * });
     *
     * @function Subscription#asType
     */
    'asType',

    /**
     * Produce a {@link View} based on the topics selected by this
     * subscription.
     * <P>
     * The lifecycle of the {@link View} will be bound to this
     * subscription; when this subscription closes, so will the view.
     *
     * @returns A new {@link View} instance bound to this subscription.
     */
    'view',

    /**
     * Create a new {@link Subscription} instance that is bound with a
     * transformation function.
     * <P>
     * The transformation function will be applied to any update event values
     * before they are emitted to any listeners.
     * <P>
     * The transformation function is provided the update value and the topic
     * path and should return a single value.
     *
     * @example
     * // Converts the update from a Buffer to a String
     * session.subscribe('foo').transform(String).on('update', function(v) { console.log(v); });
     *
     * @function Subscription#transform
     * @param {Function} transformer - The transformation function to apply to updates
     * @returns {Subscription} The new subscription bound with the transformation
     */
    'transform',

    /**
     * Close the subscription. No further events will be emitted.
     *
     * @function Subscription#close
     */
    'close'

    /**
     * Emitted when the subscription is initially opened, passing a reference to the subscription itself. This will
     * only be fired once.
     * @event Subscription#open
     */

    /**
     * Emitted when a topic that is selected by this Subscription's topic selector is subscribed to by this session.
     * Once subscribed, <code>update</code> update events may be received for this topic
     *
     * @event Subscription#subscribe
     * @property details
     * @property {String} topic - the topic to which the subscription applies
     */

    /**
     * Emitted when a topic that was previously subscribed, has been unsubscribed. No further update events will be
     * received from this topic until subscribed again. Unsubscriptions may occur due to the topic being removed, or
     * through calling {@link Session#unsubscribe} - an object containing the reason is provided.
     *
     * @event Subscription#unsubscribe
     * @property {String} reason - the reason the unsubscription occurred
     * @property {String} topic - the topic to which the unsubscription applies
     */

    /**
     * Emitted when an update has been received for a topic's value. By default, values are provided as
     * <code>Buffer</code> objects, unless {@link Subscription#transform} has been used to convert values to a specific
     * type.
     *
     * @event Subscription#update
     * @property {Buffer} value - the new value of the topic
     * @property {String} topic - the topic to which the update applies
     */

    /**
     * Emitted when the subscription has been closed using {@link Subscription#close}.
     *
     * @event Subscription#close
     */
]);
